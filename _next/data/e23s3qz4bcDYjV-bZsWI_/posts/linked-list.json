{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\",\n    div: \"div\",\n    pre: \"pre\",\n    code: \"code\",\n    span: \"span\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"A singly linked list is a dynamically distributed collection of Nodes, arranged in such a way that each Node contains a value (Data) and a pointer (Next). The pointer will point to the next element of that linked list. If the pointer points to NULL, it is the last element of the linked list.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/images/linkedlist/linkedlist.png\",\n        alt: \"image info\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"|Content|Array|Linked List|\\n|---|---|---|\\n|Size|- Fixed size\", _jsx(\"br\", {}), \" - Need to specify size during declaration|- Size changes during element addition/removal.\", _jsx(\"br\", {}), \"- Maximum size depends on memory|\\n|Memory Allocation|Static: Memory allocated during compilation.|Dynamic: Memory allocated during run time.|\\n|Ordering and sorting|Stored in a contiguous array of memory cells.|Stored in random memory cells.|\\n|Accessing|Accessing random element directly using array index: O(1).|Accessing a random element requires traversing from the beginning/end to the element: O(n).|\\n|Searching|Linear search or binary search.|Only linear search is possible.|\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Type of linked list:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Linked List.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Doubly Linked List.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Circular Linked List.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With other languages such as Java, C#, Python, there is no pointer concept, so you can use the available library, but to understand how to install it, you can see your C++ sample code.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Implement a singly linked list. Example for C++:\\nNode declaration:\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"linkedlist.cpp\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-jsx\",\n      children: _jsxs(_components.code, {\n        className: \"language-jsx\",\n        children: [\"struct \", _jsx(_components.span, {\n          className: \"token maybe-class-name\",\n          children: \"Node\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n\\t  int data\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\\t  \", _jsx(_components.span, {\n          className: \"token maybe-class-name\",\n          children: \"Node\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" next\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Create a new Node:\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"linkedlist.cpp\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-jsx\",\n      children: _jsxs(_components.code, {\n        className: \"language-jsx\",\n        children: [_jsx(_components.span, {\n          className: \"token maybe-class-name\",\n          children: \"Node\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"createNode\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token parameter\",\n          children: \"int x\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token maybe-class-name\",\n          children: \"Node\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" temp \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"new\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token class-name\",\n          children: \"Node\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    temp\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \"next \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"NULL\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    temp\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \"data \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" x\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"return\"\n        }), \" temp\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Add an element to the end of the listLinker knowing the pointer is pointing to the last element:\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"linkedlist.cpp\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-jsx\",\n      children: _jsxs(_components.code, {\n        className: \"language-jsx\",\n        children: [_jsx(_components.span, {\n          className: \"token maybe-class-name\",\n          children: \"Node\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"addElement\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsxs(_components.span, {\n          className: \"token parameter\",\n          children: [_jsx(_components.span, {\n            className: \"token maybe-class-name\",\n            children: \"Node\"\n          }), _jsx(_components.span, {\n            className: \"token operator\",\n            children: \"*\"\n          }), \"p\", _jsx(_components.span, {\n            className: \"token punctuation\",\n            children: \",\"\n          }), \" int x\"]\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n\\t\", _jsx(_components.span, {\n          className: \"token maybe-class-name\",\n          children: \"Node\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" temp \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"createNode\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"x\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// Create a new node with x is the value.\"\n        }), \"\\n\\tp\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \"next \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" temp\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// Add that node to the end of the list.\"\n        }), \"\\n\\t\", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"return\"\n        }), \" temp\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token comment\",\n          children: \"// temp now is the lst node.\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Traversing through the elements in the linked list.\"\n    }), \"\\n\", _jsx(_components.div, {\n      className: \"remark-code-title\",\n      children: \"linkedlist.cpp\"\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-jsx\",\n      children: _jsxs(_components.code, {\n        className: \"language-jsx\",\n        children: [_jsx(_components.span, {\n          className: \"token maybe-class-name\",\n          children: \"Node\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \" p \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" l\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token keyword control-flow\",\n          children: \"while\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"p \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"!=\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token constant\",\n          children: \"NULL\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    p \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"=\"\n        }), \" p\", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"-\"\n        }), _jsx(_components.span, {\n          className: \"token operator\",\n          children: \">\"\n        }), \"next\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \";\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To be continued...\\nGo back \", _jsx(_components.a, {\n        href: \"/\",\n        children: \"Home\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Learn DSA with me - Linked List","description":"A single linked list is the best and simplest example of a dynamic data structure that uses pointers for implementation.","publishedTime":"2021-08-27","modifiedTime":"2021-08-27","image":"/images/linkedlist/linkedlist.png"}},"frontMatter":{"title":"Learn DSA with me - Linked List","description":"A single linked list is the best and simplest example of a dynamic data structure that uses pointers for implementation.","publishedTime":"2021-08-27","modifiedTime":"2021-08-27","image":"/images/linkedlist/linkedlist.png"}},"__N_SSG":true}