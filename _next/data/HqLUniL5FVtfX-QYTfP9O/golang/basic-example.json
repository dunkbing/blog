{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    a: \"a\",\n    span: \"span\",\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(\"br\", {}), \"\\n\", _jsxs(_components.h1, {\n      id: \"creating-a-basic-http-server-in-go\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#creating-a-basic-http-server-in-go\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Creating a Basic HTTP Server in Go\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let's create a simple HTTP server that responds with \\\"Hello, World!\\\" when accessed. This will serve as your first step into the world of Go programming.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"understanding-the-nethttp-package\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#understanding-the-nethttp-package\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Understanding the \", _jsx(_components.code, {\n        children: \"net/http\"\n      }), \" Package\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"net/http\"\n      }), \" package in Go is a powerful tool for creating HTTP servers and clients. It provides a simple and efficient way to handle HTTP requests and responses.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let's create a new file named \", _jsx(_components.code, {\n        children: \"main.go\"\n      }), \" and open it in your preferred code editor.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here's the code you need to write in \", _jsx(_components.code, {\n        children: \"main.go\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-go\",\n      children: _jsxs(_components.code, {\n        className: \"language-go\",\n        children: [_jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"package\"\n        }), \" main\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"import\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"fmt\\\"\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"net/http\\\"\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\\n\", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"func\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token function\",\n          children: \"main\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n    http\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"HandleFunc\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"/\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token keyword\",\n          children: \"func\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"w http\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"ResponseWriter\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" r \", _jsx(_components.span, {\n          className: \"token operator\",\n          children: \"*\"\n        }), \"http\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), \"Request\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"{\"\n        }), \"\\n        fmt\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"Fprint\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), \"w\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\"Hello, World!\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n    \", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\\n    http\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \".\"\n        }), _jsx(_components.span, {\n          className: \"token function\",\n          children: \"ListenAndServe\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"(\"\n        }), _jsx(_components.span, {\n          className: \"token string\",\n          children: \"\\\":8080\\\"\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \",\"\n        }), \" \", _jsx(_components.span, {\n          className: \"token boolean\",\n          children: \"nil\"\n        }), _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \")\"\n        }), \"\\n\", _jsx(_components.span, {\n          className: \"token punctuation\",\n          children: \"}\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this code, we're defining a function that handles HTTP requests. When a request comes in, it writes \\\"Hello, World!\\\" to the response writer.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"running-your-server\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#running-your-server\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Running Your Server\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Open your terminal, navigate to the directory containing your \", _jsx(_components.code, {\n        children: \"main.go\"\n      }), \" file, and run the following command:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      className: \"language-bash\",\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"go run main.go\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This command compiles and runs your Go program.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"testing-your-server\",\n      children: [_jsx(_components.a, {\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        href: \"#testing-your-server\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"Testing Your Server\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Open your web browser and navigate to \", _jsx(_components.code, {\n        children: \"http://localhost:8080\"\n      }), \". You should see \\\"Hello, World!\\\" displayed on the webpage.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Congratulations! You've just created your first webpage using Go. This is a basic example, but it's a great start for understanding how Go handles HTTP requests and responses.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Your First Webpage with Go","description":"Learn how to create a simple HTTP server in Go that responds with \"Hello, World!\"","publishedTime":"2024-02-23","modifiedTime":"2024-02-23","image":"/images/gopher-github-actions.jpeg"}},"frontMatter":{"title":"Your First Webpage with Go","description":"Learn how to create a simple HTTP server in Go that responds with \"Hello, World!\"","publishedTime":"2024-02-23","modifiedTime":"2024-02-23","image":"/images/gopher-github-actions.jpeg"}},"__N_SSG":true}